---
// guys.astro - Página de performers de AlphaMen
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import TaylorSection from '../components/guys/TaylorSection.astro';
import SanchezSection from '../components/guys/SanchezSection.astro';
import JBSection from '../components/guys/JBSection.astro';
import FinnSection from '../components/guys/FinnSection.astro'; 
import RickySection from '../components/guys/RickySection.astro';
import SammySection from '../components/guys/SammySection.astro'; 
import JTSection from '../components/guys/JTSection.astro';
import AndreSection from '../components/guys/AndreSection.astro'; 
import '../styles/guys/scroll-blur-effect.css';
---

<Layout 
  title="AlphaMen - Our Performers" 
  description="Meet the AlphaMen performers - professional artists delivering world-class entertainment experiences."
>
  <Navbar />
  
  <div class="guys-container">
    <TaylorSection />
    <SanchezSection />
    <JBSection />
    <FinnSection /> 
    <RickySection /> 
    <SammySection />
    <JTSection />
    <AndreSection />
  </div>
</Layout>

<!-- Script para el efecto scroll cinemático tipo Apple -->
<script>
  let ticking = false;
  let sections: NodeListOf<Element>;
  let windowHeight: number;

  function updateScrollEffect(): void {
    const scrollY = window.scrollY;
    windowHeight = window.innerHeight;

    sections.forEach((section) => {
      const htmlSection = section as HTMLElement;
      const rect = htmlSection.getBoundingClientRect();
      const sectionTop = rect.top;
      const sectionHeight = rect.height;
      const sectionBottom = sectionTop + sectionHeight;

      let progress = 0;

      if (sectionTop <= 0 && sectionBottom >= windowHeight) {
        progress = 1;
      } else if (sectionTop > 0 && sectionTop < windowHeight) {
        progress = 1 - (sectionTop / windowHeight);
      } else if (sectionBottom > 0 && sectionBottom < windowHeight) {
        progress = sectionBottom / windowHeight;
      }

      if (progress >= 0.7) {
        htmlSection.classList.add('scrolling-in');
        htmlSection.classList.remove('scrolling-out', 'inactive');
      } else if (progress > 0.2 && progress < 0.7) {
        htmlSection.classList.add('scrolling-out');
        htmlSection.classList.remove('scrolling-in', 'inactive');
      } else {
        htmlSection.classList.add('inactive');
        htmlSection.classList.remove('scrolling-in', 'scrolling-out');
      }

      if (progress > 0 && progress < 1) {
        const opacity = Math.max(0, Math.min(1, progress));
        const scale = 0.8 + (progress * 0.2);
        const blur = (1 - progress) * 25;
        const brightness = 0.4 + (progress * 0.6);

        htmlSection.style.opacity = `${opacity}`;
        htmlSection.style.transform = `scale(${scale}) translateZ(${-300 * (1 - progress)}px)`;
        htmlSection.style.filter = `blur(${blur}px) brightness(${brightness})`;
      }
    });

    ticking = false;
  }

  function onScroll(): void {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        updateScrollEffect();
      });
      ticking = true;
    }
  }

  function initCinematicScroll(): void {
    sections = document.querySelectorAll('.guy-section');
    windowHeight = window.innerHeight;
    updateScrollEffect();
    window.addEventListener('scroll', onScroll, { passive: true });
    window.addEventListener('resize', () => {
      windowHeight = window.innerHeight;
      updateScrollEffect();
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      initCinematicScroll();
    }, 100);
  });

  window.addEventListener('beforeunload', () => {
    window.removeEventListener('scroll', onScroll);
  });
</script>

<!-- Script Universal de Carrusel -->
<script>
  class CarouselManager {
    private section: string;
    private currentSlide: number;
    private totalSlides: number;
    private interval: number | null;
    private isHovering: boolean;
    private images: HTMLElement[];

    constructor(sectionSelector: string) {
      this.section = sectionSelector;
      this.currentSlide = 0;
      this.totalSlides = 3;
      this.interval = null;
      this.isHovering = false;
      this.images = [];
    }

    init(): boolean {
      const nodeList = document.querySelectorAll(`${this.section} .carousel-image`);
      this.images = Array.from(nodeList) as HTMLElement[];
      
      if (this.images.length === 0) {
        console.warn(`No carousel images found for ${this.section}`);
        return false;
      }

      if (this.images[0]) {
        this.images[0].style.opacity = '1';
        this.images[0].classList.add('active');
      }

      this.setupHover();
      this.start();
      this.preloadImages();

      return true;
    }

    private setupHover(): void {
      const wrapper = document.querySelector(`${this.section} .image-wrapper`);
      if (!wrapper) return;

      wrapper.addEventListener('mouseenter', () => {
        this.isHovering = true;
        this.stop();
      });

      wrapper.addEventListener('mouseleave', () => {
        this.isHovering = false;
        this.start();
      });
    }

    private rotate(): void {
      if (this.isHovering || this.images.length === 0) return;

      const currentImage = this.images[this.currentSlide];
      const nextSlide = (this.currentSlide + 1) % this.totalSlides;
      const nextImage = this.images[nextSlide];

      if (!nextImage) return;

      if (currentImage) {
        currentImage.style.opacity = '0';
        currentImage.classList.remove('active');
      }

      nextImage.style.opacity = '1';
      nextImage.classList.add('active');

      this.currentSlide = nextSlide;
    }

    start(): void {
      this.stop();
      this.interval = window.setInterval(() => this.rotate(), 4000);
    }

    stop(): void {
      if (this.interval !== null) {
        clearInterval(this.interval);
        this.interval = null;
      }
    }

    private preloadImages(): void {
      this.images.forEach(img => {
        const htmlImg = img as HTMLImageElement;
        const src = htmlImg.getAttribute('src');
        if (src) {
          const preload = new Image();
          preload.src = src;
        }
      });

      const hoverImg = document.querySelector(`${this.section} .hover-image`) as HTMLImageElement;
      if (hoverImg) {
        const src = hoverImg.getAttribute('src');
        if (src) {
          const preload = new Image();
          preload.src = src;
        }
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      const taylorCarousel = new CarouselManager('#taylor');
      const sanchezCarousel = new CarouselManager('#sanchez');
      const jbCarousel = new CarouselManager('#jb');
      const finnCarousel = new CarouselManager('#finn'); 
      const rickyCarousel = new CarouselManager('#ricky');
      const sammyCarousel = new CarouselManager('#sammy');
      const jtCarousel = new CarouselManager('#jt');
      const leonCarousel = new CarouselManager('#leon');
      const andreCarousel = new CarouselManager('#andre'); 

      // Inicializar cada uno
      taylorCarousel.init();
      sanchezCarousel.init();
      jbCarousel.init();
      finnCarousel.init();
      rickyCarousel.init();
      sammyCarousel.init();
      jtCarousel.init();
      leonCarousel.init();
      andreCarousel.init(); 

      // ✅ ELIMINADAS las líneas stop() duplicadas

      window.addEventListener('beforeunload', () => {
        taylorCarousel.stop();
        sanchezCarousel.stop();
        jbCarousel.stop();
        finnCarousel.stop();
        rickyCarousel.stop();
        sammyCarousel.stop(); 
        jtCarousel.stop();
        leonCarousel.stop();
        andreCarousel.stop();
      });

      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          taylorCarousel.stop();
          sanchezCarousel.stop();
          jbCarousel.stop();
          finnCarousel.stop(); 
          rickyCarousel.stop();
          sammyCarousel.stop();
          jtCarousel.stop();
          leonCarousel.stop(); 
          andreCarousel.stop();
        } else {
          if (!taylorCarousel['isHovering']) taylorCarousel.start();
          if (!sanchezCarousel['isHovering']) sanchezCarousel.start();
          if (!jbCarousel['isHovering']) jbCarousel.start();
          if (!finnCarousel['isHovering']) finnCarousel.start();
          if (!rickyCarousel['isHovering']) rickyCarousel.start();
          if (!sammyCarousel['isHovering']) sammyCarousel.start();
          if (!jtCarousel['isHovering']) jtCarousel.start();
          if (!leonCarousel['isHovering']) leonCarousel.start(); 
          if (!andreCarousel['isHovering']) andreCarousel.start();
        }
      });
    }, 150);
  });
</script>